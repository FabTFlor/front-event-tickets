import axios from "axios";
import { logoutUser, getAuthToken } from "./authApi"; // ‚úÖ Se elimin√≥ la importaci√≥n incorrecta
import { saveAuthTokens as saveAuthToken } from "./authApi"; // ‚úÖ Se renombr√≥ correctamente

const API_BASE_URL = "http://localhost:8080/api"; // üìå URL base del backend
const AUTH_URL = "http://localhost:8080/auth/refresh"; // üìå Endpoint de refresco de token

// üîπ Crear una instancia de Axios con la base de la API
const axiosInstance = axios.create({
  baseURL: API_BASE_URL,
  headers: { "Content-Type": "application/json" },
});

// üîπ Interceptor de solicitudes (agrega el token JWT a cada request)
axiosInstance.interceptors.request.use(
  async (config) => {
    const token = getAuthToken();
    if (token) {
      config.headers.Authorization = `Bearer ${token}`; // ‚úÖ Se adjunta el token
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// üîπ Interceptor de respuestas (maneja errores de autenticaci√≥n y refresca token)
axiosInstance.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    // ‚úÖ Si es un error 401 y el request NO ha sido reintentado a√∫n
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true; // üöÄ Marcar el request para que no haga un loop infinito
      const refreshToken = localStorage.getItem("refresh_token");

      if (!refreshToken) {
        console.warn("‚ö†Ô∏è No hay refresh token disponible. Cerrando sesi√≥n...");
        logoutUser();
        return Promise.reject(error);
      }

      try {
        // üîÑ Intentar renovar el access_token
        const refreshResponse = await axios.post(AUTH_URL, {}, {
          headers: { Authorization: `Bearer ${refreshToken}` },
        });

        const newAccessToken = refreshResponse.data.access_token;
        const newRefreshToken = refreshResponse.data.refresh_token;

        // ‚úÖ Guardar los nuevos tokens
        saveAuthToken(newAccessToken, newRefreshToken);

        // ‚úÖ Reintentar la solicitud original con el nuevo token
        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;
        return axiosInstance(originalRequest);
      } catch (refreshError) {
        console.warn("‚ùå No se pudo renovar el token. Cerrando sesi√≥n...");
        logoutUser();
        return Promise.reject(refreshError);
      }
    }

    return Promise.reject(error);
  }
);

export default axiosInstance;
